@page "/inventory"

@if (_globalState.CurrentUser?.Role == Role.Admin)
{
    <nav class="navbar navbar-light bg-light justify-content-between">
        <h1 class="navbar-brand mb-0 h1">Users</h1>
        <button class="btn btn-primary" type="button" @onclick="OpenAddItemDialog">
            <span class="oi oi-plus" /> Add Items
        </button>
    </nav> 

}


<table class="table">
    <thead>
        <tr>
            <th>
                <div class="d-flex">
                    Item Name
                    <a class='btn text-@(_sortBy == "itemName" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("itemName")'>
                        <span class='oi oi-sort-@(_sortBy == "itemName" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Price
                    <a class='btn text-@(_sortBy == "price" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("price")'>
                        <span class='oi oi-sort-@(_sortBy == "price" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Quantity
                    <a class='btn text-@(_sortBy == "quantity" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("quantity")'>
                        <span class='oi oi-sort-@(_sortBy == "quantity" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            @*<th>Item Name</th>
            <th>Price</th>
            <th>Quantity</th>*@
            <th>Added BY</th>
            <th>Actions</th>
            <th></th>
            <th></th>
            
        </tr>
    </thead>
    <tbody>
        @{
         IEnumerable <ItemModel> itemList = _items;
            if (_sortBy == "itemName")
            {
                itemList = _sortDirection == "ascending" ? itemList.OrderBy(i => i.ItemName) : itemList.OrderByDescending(i =>
                i.ItemName);
            }
            else if (_sortBy == "price")
            {
                itemList = _sortDirection == "ascending" ? itemList.OrderBy(i => i.Price) : itemList.OrderByDescending(i =>
                i.Price);
            }
            else if (_sortBy == "quantity")
            {
                itemList = _sortDirection == "ascending" ? itemList.OrderBy(i => i.Quantity) : itemList.OrderByDescending(i =>
                i.Quantity);
            }
        foreach (var item in itemList)
        {
            <tr>
                <td>@item.ItemName</td>
                <td>@item.Price</td>
                <td>@item.Quantity</td>
                <td>
                    @{
                        var creator = UserService.GetById(item.Added_by);
                        <span>@(creator == null ? "Unknown" : creator.Username)</span>
                    }
                </td>
                    <td>
                        <button disabled="@(_globalState.CurrentUser != null ? _globalState.CurrentUser.Id == item.Id : false)"
                        class="btn btn-outline-success" type="button" @onclick="()=>OpenRequestItemDialog(item)">
                            <span class="oi oi-share" /> Request
                        </button>
                    </td>
                    @if(_globalState.CurrentUser?.Role == Role.Admin)
                    {
                        <td>
                            <button disabled="@(_globalState.CurrentUser != null ? _globalState.CurrentUser.Id == item.Id : false)"
                            class="btn btn-outline-secondary" type="button" @onclick="()=>OpenEditItemDialog(item)">
                                <span class="oi oi-pencil" /> Edit
                            </button>
                        </td>
                        <td>
                            <button disabled="@(_globalState.CurrentUser != null ? _globalState.CurrentUser.Id == item.Id : false)"
                             class="btn btn-outline-danger" type="button" @onclick="()=>OpenDeleteItemDialog(item)">
                                <span class="oi oi-delete" /> Delete
                            </button>
                        </td>
                        
                    }
                    
                    
            </tr>
        }

        }
        
    </tbody>
</table>

@*@if (_showAddUserDialog)
{
    <ModalDialog Title="Add User" OnClose="@OnAddUserDialogClose" OkLabel="Add">
        <form>
            <div class="form-floating">
                <input type="text" class="form-control username" @bind="_username" placeholder="Username" />
                <label for="floatingInput">Username</label>
            </div>
            <div class="form-floating mb-3">
                <input type="password" class="form-control password" @bind="_password" placeholder="Password" />
                <label for="floatingPassword">Password</label>
            </div>
            <div class="form-check">
                <input id="userRole" type="radio" class="form-check-input" name="role" value="@Role.User"
                   @onchange="RoleChangeHandler" checked="@(_role == Role.User)">
                <label class="form-check-label" for="userRole">@Role.User</label>
            </div>
            <div class="form-check">
                <input id="adminRole" type="radio" class="form-check-input" name="role" value="@Role.Admin"
                   @onchange="RoleChangeHandler" checked="@(_role == Role.Admin)">
                <label class="form-check-label" for="adminRole">@Role.Admin</label>
            </div>
            @if (!string.IsNullOrEmpty(_addUserErrorMessage))
            {
                <AlertMessage Type="danger" Message="@_addUserErrorMessage" />
            }
        </form>
    </ModalDialog>
}
@if (_showEditItemDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnEditItemDialogClose" OkLabel="@_dialogOkLabel">
        <div class="form-floating">
            <input id="itemName" type="text" class="form-control" @bind="_itemModel.ItemName" placeholder="Item Name" />
            <label for="itemName">Item Name</label>
        </div>
        <div class="form-floating">
            <input id="price" type="text" class="form-control" @bind="_itemModel.Price" placeholder="Price" />
            <label for="price">Price</label>
        </div>
        <div class="form-floating">
            <input id="quantity" type="text" class="form-control" @bind="_itemModel.Quantity" placeholder="Quantity" />
            <label for="quantity">Quantity</label>
        </div>

    @if (!string.IsNullOrEmpty(_editItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_editItemErrorMessage" />
        }
        </ModalDialog>
}


*@
@if (_showRequestItemDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnRequestItemDialogClose" OkLabel="@_dialogOkLabel">
        @*<div class="form-floating">
            <input id="itemName" type="text" class="form-control" @bind="_itemModel.ItemName" placeholder="Item Name" />
            <label for="itemName">Item Name</label>
        </div>*@
        <div class="form-floating">
            <input id="quantity" type="text" class="form-control" @bind="_requestQuantity" placeholder="Quantity" />
            <label for="quantity">Quantity</label>
        </div>

        @if (!string.IsNullOrEmpty(_requestItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_requestItemErrorMessage" />
        }
    </ModalDialog>
}

@if (_showEditItemDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnEditItemDialogClose" OkLabel="@_dialogOkLabel">
        <div class="form-floating">
            <input id="itemName" type="text" class="form-control" @bind="_itemModel.ItemName" placeholder="Item Name" />
            <label for="itemName">Item Name</label>
        </div>
        <div class="form-floating">
            <input id="price" type="text" class="form-control" @bind="_itemModel.Price" placeholder="Price" />
            <label for="price">Price</label>
        </div>
        <div class="form-floating">
            <input id="quantity" type="text" class="form-control" @bind="_itemModel.Quantity" placeholder="Quantity" />
            <label for="quantity">Quantity</label>
        </div>

        @if (!string.IsNullOrEmpty(_editItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_editItemErrorMessage" />
        }
    </ModalDialog>
}



@if (_showDeleteItemDialog)
{
    <ModalDialog Title="Delete User" OnClose="@OnDeleteItemDialogClose" OkLabel="Confirm">
        <p>Are you sure you want to delete <strong>@_deleteItem.ItemName</strong> item and the data?</p>
        @if (!string.IsNullOrEmpty(_deleteItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_deleteItemErrorMessage" />
        }
    </ModalDialog>
}

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private List<ItemModel> _items { get; set; }
    //private bool _showAddItemDialog { get; set; }
    private bool _showRequestItemDialog { get; set; }
    private bool _showEditItemDialog { get; set; }
    private bool _showDeleteItemDialog { get; set; }
    //private string _addItemErrorMessage { get; set; }
    private string _requestItemErrorMessage { get; set; }
    private string _editItemErrorMessage { get; set; }
    private string _deleteItemErrorMessage { get; set; }
    private ItemModel _deleteItem { get; set; }
    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }
    private int _requestQuantity { get; set; }
    private List<Request> _itemRequest { get; set; }
    private ItemModel _itemModel { get; set; }
    //private string _Itemname { get; set; }
    //private decimal _Price { get; set; }
    //private int _Quantity { get; set; }
    //private string _Added_by { get; set; }
    private string _sortBy = "itemName";
    private string _sortDirection = "ascending";


    protected override void OnInitialized()
    {
        _items = ItemModelService.GetAll(_globalState.CurrentUser.Id);
    }

    private void SortByHandler(string sortByName)
    {
        if (_sortBy == sortByName)
        {
            _sortDirection = _sortDirection == "ascending" ? "descending" : "ascending";
        }
        else
        {
            _sortBy = sortByName;
            _sortDirection = "ascending";
        }
    }

    private void OpenAddItemDialog()
    {
        _dialogTitle = "Add Item";
        _dialogOkLabel = "Add";
        _itemModel = new ItemModel();
        _itemModel.Id = Guid.Empty;
        _showEditItemDialog  = true;
    }
    //private void OnAddUserDialogClose(bool isCancel)
    //{
    //    if (isCancel)
    //    {

    //        _showAddUserDialog = false;
    //    }
    //    else
    //    {
    //        try
    //        {
    //            _addUserErrorMessage = "";
    //            _users = UserService.Create(_globalState.CurrentUser.Id, _username, _password, _role);
    //            _showAddUserDialog = false;
    //        }
    //        catch (Exception e)
    //        {
    //            _addUserErrorMessage = e.Message;
    //        }
    //    }
    //}

    //private void RoleChangeHandler(ChangeEventArgs e)
    //{
    //    _role = (Role)Enum.Parse(typeof(Role), e.Value.ToString());
    //}
    private void OpenEditItemDialog(ItemModel editItem)
    {
        _dialogTitle = "Edit Item";
        _dialogOkLabel = "Save";

        _itemModel = editItem;

        _showEditItemDialog = true;
    }

    private void OpenRequestItemDialog(ItemModel requestItem)
    {
        _dialogTitle = "Request Item" + requestItem.ItemName;
        _dialogOkLabel = "Request";

        _requestQuantity = 0;

        _itemModel = requestItem;

        _showRequestItemDialog = true;
    }

    private void OnRequestItemDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showRequestItemDialog = false;
        }
        else
        {
            try
            {
                _requestItemErrorMessage = "";
                if (_requestQuantity == 0)
                {
                    throw new Exception("The request quantity cannot be zero");
                }
                else if ((_itemModel.Quantity - _requestQuantity) < 0)
                {
                    throw new Exception("The request quantity exceeded");
                }
                _itemRequest = RequestService.Create(_globalState.CurrentUser.Id, _itemModel.Id, _itemModel.ItemName, _requestQuantity);

                _showRequestItemDialog = false;
            }
            catch (Exception e)
            {
                _requestItemErrorMessage = e.Message;
            }
        }
    }

    private void OnEditItemDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showEditItemDialog = false;
        }
        else
        {
            try
            {
                _editItemErrorMessage = "";
                if (_itemModel.Id == Guid.Empty)
                {
                    _items = ItemModelService.Create(_globalState.CurrentUser.Id, _itemModel.ItemName, _itemModel.Price, _itemModel.Quantity);
                }
                else
                {
                    _items = ItemModelService.Update(_globalState.CurrentUser.Id, _itemModel.Id, _itemModel.ItemName, _itemModel.Price, _itemModel.Quantity);
                }
                _showEditItemDialog = false;
            }
            catch (Exception e)
            {
                _editItemErrorMessage = e.Message;
            }
        }
    }


    private void OpenDeleteItemDialog(ItemModel item)
    {
        _deleteItem = item;
        _showDeleteItemDialog = true;
    }
    private void OnDeleteItemDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            _showDeleteItemDialog = false;
            _deleteItem = null;
        }
        else
        {
            try
            {
                _deleteItemErrorMessage = "";
                _items = ItemModelService.Delete(_globalState.CurrentUser.Id,_deleteItem.Id);
                _showDeleteItemDialog = false;
                _deleteItem = null;
            }
            catch (Exception e)
            {
                _deleteItemErrorMessage = e.Message;
            }
        }
    }
}
